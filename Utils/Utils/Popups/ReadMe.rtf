{\rtf1\ansi\ansicpg1251\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red178\green24\blue137;\red30\green32\blue40;\red255\green255\blue255;
\red131\green192\blue87;\red0\green160\blue190;\red65\green182\blue69;}
{\*\expandedcolortbl;;\csgenericrgb\c69800\c9500\c53600;\csgenericrgb\c11800\c12500\c15700;\csgenericrgb\c100000\c100000\c100000;
\csgenericrgb\c51200\c75400\c34300;\csgenericrgb\c0\c62600\c74600;\csgenericrgb\c25500\c71400\c27000;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Example of creation popup:\
\
1. Presenter\
\
Create interface protocol that supports PopupViewable, that will allow you to call show/hide methods of view. In this example 2 parameters passed for configuration, but it's not required, you can write your own methods with different parameters.\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 import\cf4  UIKit
\f0\fs24 \cf0 \
\

\f1\fs22 \cf2 protocol\cf4  MesasgePopupInterface: \cf5 PopupViewable\cf4  \{
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf2 func\cf4  set(message: \cf6 String\cf4 ?)
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf2 func\cf4  set(buttonTitle title: \cf6 String\cf4 ?)
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4 \}
\f0\fs24 \cf0 \
\

\f1\fs22 \cf2 protocol\cf4  MessagePopupOutput \{
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4 \}
\f0\fs24 \cf0 \
\

\f1\fs22 \cf2 class\cf4  MessagePopupPresenter: \cf5 PopupPresenter\cf4  \{
\f0\fs24 \cf0 \
\

\f1\fs22 \cf4     \cf2 class\cf4  \cf2 func\cf4  show(viewName name: \cf6 String\cf4 ? = \cf2 nil\cf4 , in window: \cf6 UIWindow\cf4 ?, with message: \cf6 String\cf4 ?, buttonTitle: \cf6 String\cf4 ?) \{
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \cf2 guard\cf4  \cf2 let\cf4  popupView = \cf5 MessagePopupView\cf4 .\cf5 newPopup\cf4 (named: name) \cf2 else\cf4  \{ \cf2 return\cf4  \}
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \cf2 let\cf4  presenter = \cf2 self\cf4 .\cf2 init\cf4 (with: popupView)
\f0\fs24 \cf0 \

\f1\fs22 \cf4         popupView.\cf5 presenter\cf4  = presenter
\f0\fs24 \cf0 \

\f1\fs22 \cf4         popupView.\cf5 set\cf4 (message: message)
\f0\fs24 \cf0 \

\f1\fs22 \cf4         popupView.\cf5 set\cf4 (buttonTitle: buttonTitle)
\f0\fs24 \cf0 \

\f1\fs22 \cf4         presenter.\cf5 show\cf4 (in: window)
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \}
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4 \}
\f0\fs24 \cf0 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
2. View + xib\
\
Create your view, add outlets, if needed. Your view should be inherited from PopuView and support interface protocol decleared in presenter.\
Xib file should contain view for background and container view that will contain all content for displaying. \
\
PopupView has outlet for container:\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 @IBOutlet\cf4  \cf2 private\cf4  \cf2 weak\cf4  \cf2 var\cf4  container: \cf6 UIView\cf4 !
\f0\fs24 \cf0 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
You should connect your container in order to show or hide it.\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 class\cf4  MessagePopupView: \cf5 PopupView\cf4 , \cf5 MesasgePopupInterface\cf4  \{
\f0\fs24 \cf0 \
\

\f1\fs22 \cf4     \cf2 @IBOutlet\cf4  \cf2 private\cf4  \cf2 weak\cf4  \cf2 var\cf4  messageLabel: \cf6 UILabel\cf4 !
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf2 @IBOutlet\cf4  \cf2 private\cf4  \cf2 weak\cf4  \cf2 var\cf4  actionButton: \cf6 UIButton\cf4 !
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf7 // MARK: - MesasgePopupInterface -
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf2 func\cf4  set(message: \cf6 String\cf4 ?) \{
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \cf5 messageLabel\cf4 .\cf6 text\cf4  = message
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \}
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf2 func\cf4  set(buttonTitle title: \cf6 String\cf4 ?) \{
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \cf5 actionButton\cf4 .\cf6 setTitle\cf4 (title, for: .\cf6 normal\cf4 )
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \}
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4 \}}